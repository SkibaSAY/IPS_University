20.08.24 Антон Сластухин(@SkibaSAY)

2.Пользовательские рекомендации(Backend/ML_Tenderland)
Ключевые лица:
*Оксана Кхарасик - руководитель отдела Сопровождения. Она поможет с тестированием, 
найдёт клиентам и подскажет своё видение - у неё куча идей, как это приложение использовать.

Алексей Тарасов - идейный руководитель всей этой движухи. 
Он поможет проанализировать результаты, даст дельные советы по тому, как стоит делать*

Вся команда - ребята подскажут по базе, что и где, а так же, что лучше не использовать
(например, категории, которые определяем сами, работают плохо)

Цели: На основе активности пользователя в системе(Просмотры - через эластик смотрим сколько раз открыли сущность; Добавление в избранное; 
Участия в тендерах) сформировать модель, по которой можно ЭФФЕКТИВНО по времени и памяти сказать, что тендер пользователю будет интересен.

Оценка: от 0 до 100 - на стороне сервера, "Нравиться", "не нравится", "может быть интересно", на стороне клиента.

Приложение поддерживает 2 реализации под общим интерфейсом:
1.Реализация на основе ML NET - работает неплохо, но нет возможности влиять на оценку, писать кастомные типы - 
поддерживает String, Simple и массивы этих типов.
Скорость работы: =- минус то же самое, что и вариант 2
Память: выжирает около 8гб оперативной памяти для хранения моделей - значительно больше, чем вариант 2.

*Модели подгружаются при старте, тк на это уходит очень много времени, если подгружать их каждый раз при оценке - примерно, 
в 10 раз скорость проседает.

*Вариант 2 - Кастомное решение.
Поддерживает несколько типов данных:
как простые типы, так и сложные, например, реализованы кастомные анализаторы:
-Массивов
-Иерархических списков
-Строки

Реализация кастомных анализаторов позволяет писать функционал под конкретную нашу задачу и бизнес логику.

Характеристики:
Скорость анализа - чуть выше встроенных средств
Вместо 5-20 потоков оказалось достаточным использовать 1 поток

Затраты памяти - очень малы, тк модели на порядки меньше.

Скорость обучения - раза в 3 меньше. Это связано с настройками - при подборе весов происходит около 10-20 попыток 
рандомно сгенерировать веса и подстроить их под обучающие данные.
Если снизить число попыток незначительно упадёт точность модели, но скорость обучения будет высокой.

Я рекомендую, оставить скорость обучения как есть, тк переобучение пользовательских моделей может идти фоном или в выходной.

Точность - на порядок лучше, тк реализован кастомный анализатор.

*Так же, есть база для личного ассистента - начал тестировать, русские модели с HuggyFace